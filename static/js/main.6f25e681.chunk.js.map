{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComp","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","useState","setRobots","searchfield","setSearchfield","useEffect","fetch","then","response","json","users","filterRobots","filter","robot","toLocaleLowerCase","includes","length","event","target","value","ReactDOM","render","document","getElementById"],"mappings":"wLAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAAQC,IAAG,+BAA0BH,EAA1B,cACpB,gCACI,6BAAKF,IACL,4BAAIC,WCaLK,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAWD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OACA,cAAC,EAAD,CAECT,GAAMK,EAAOI,GAAGT,GAChBF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,OAHVU,MAMX,OACI,8BACKH,KCDEI,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKV,UAAU,MAAf,SACI,uBACAA,UAAU,mCACVW,KAAM,SACNC,YAAY,gBACZC,SAAUH,OCCPI,EARA,SAACC,GACZ,OACA,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,Y,4BCiBAC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACH,oDAEJG,KAAKX,MAAMK,a,GAhBCQ,a,KCsDZC,MAhDf,WAAe,MASiBC,mBAAS,IAT1B,mBASJ1B,EATI,KASI2B,EATJ,OAU2BD,mBAAS,IAVpC,mBAUJE,EAVI,KAUSC,EAVT,KAmBXC,qBAAU,WACNC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAIR,EAAUQ,QAC3B,IAEF,IAGMC,EAAepC,EAAOqC,QAAO,SAAAC,GAC/B,OAAOA,EAAM7C,KAAK8C,oBAAoBC,SAASZ,EAAYW,wBAG/D,OAAQvC,EAAOyC,OAGP,sBAAK7C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBAEA,cAAC,EAAD,CAAWU,aAbA,SAACoC,GACpBb,EAAea,EAAMC,OAAOC,UAapB,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU5C,OAAQoC,WARlC,0C,MClCRS,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,U","file":"static/js/main.6f25e681.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots'src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n    const cardComp = robots.map((user, i) => {\n       return (\n       <Card \n        key = {i} \n        id = {robots[i].id} \n        name={robots[i].name} \n        email={robots[i].email}\n        />);\n    })\n    return (\n        <div>\n            {cardComp}\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n            className='pa3 ba b--green bg-lightest-blue' \n            type ='search' \n            placeholder='search robots' \n            onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n        {props.children}\n    </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({ hasError: true})\n    }\n\n    render(){\n        if(this.state.hasError) {\n            return <h1>Opps. Did not work</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, { useState, useEffect } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n// import { robots } from './robots';\n\nfunction App() {\n    // constructor (){\n    //     super()\n    //     this.state = {\n    //         robots: [],\n    //         searchfield: ''\n    //     }\n    // }\n\n    const [robots, setRobots] = useState([])\n    const [searchfield, setSearchfield] = useState('')\n    // const [count, setCount] = useState(0)\n\n    // componentDidMount() {\n    //     fetch(`https://jsonplaceholder.typicode.com/users`)\n    //     .then(response=> response.json())\n    //     .then(users => this.setState( {robots: users}));\n    // }\n\n    useEffect(()=>{\n        fetch(`https://jsonplaceholder.typicode.com/users`)\n        .then(response=> response.json())\n        .then(users => setRobots(users));\n    },[])\n\n    const onSearchChange = (event) => {\n        setSearchfield(event.target.value)\n    }\n    const filterRobots = robots.filter(robot =>{\n        return robot.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase());\n    })\n\n    return !robots.length ?\n        <h1>Loading</h1> :\n        (\n            <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                {/* <button onClick={()=>setCount(count+1)}>Click me</button> */}\n                <SearchBox searchChange={onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filterRobots}/>\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n        );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport './containers/App.css';\n\nReactDOM.render(<App />,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}